name: Build PrusaSlicer Debian

on:
  schedule:
    # Check for upstream changes daily at 10 AM UTC
    - cron: '0 10 * * *'
  workflow_dispatch: # Manual trigger
    inputs:
      force_build:
        description: 'Force build even if no new release'
        required: false
        default: 'false'
        type: boolean
      target_version:
        description: 'Specific version to build (e.g., version_2.7.1). Leave empty for latest.'
        required: false
        default: ''
        type: string
  
jobs:
  check-upstream:
    runs-on: ubuntu-latest
    outputs:
      has-new-release: ${{ steps.check.outputs.has-new-release }}
      latest-tag: ${{ steps.check.outputs.latest-tag }}
      should-build: ${{ steps.check.outputs.should-build }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Check for new upstream releases
        id: check
        run: |
          # Add upstream remote
          git remote add upstream https://github.com/prusa3d/PrusaSlicer.git
          git fetch upstream --tags
          
          # Determine target version
          if [ "${{ github.event.inputs.target_version }}" != "" ]; then
            LATEST_TAG="${{ github.event.inputs.target_version }}"
            echo "Using specified version: $LATEST_TAG"
          else
            # Get latest upstream tag
            LATEST_TAG=$(git ls-remote --tags upstream | grep -E 'refs/tags/version_[0-9]' | sort -V | tail -1 | sed 's/.*refs\/tags\///')
            echo "Latest upstream tag: $LATEST_TAG"
          fi
          
          # Check if we have this tag locally
          if git tag -l | grep -q "^$LATEST_TAG$"; then
            echo "Tag $LATEST_TAG already exists locally"
            echo "has-new-release=false" >> $GITHUB_OUTPUT
          else
            echo "New tag found: $LATEST_TAG"
            echo "has-new-release=true" >> $GITHUB_OUTPUT
          fi
          
          # Determine if we should build
          if [ "${{ github.event.inputs.force_build }}" == "true" ]; then
            echo "Force build requested"
            echo "should-build=true" >> $GITHUB_OUTPUT
          elif git tag -l | grep -q "^$LATEST_TAG$"; then
            echo "should-build=false" >> $GITHUB_OUTPUT
          else
            echo "should-build=true" >> $GITHUB_OUTPUT
          fi
          
          echo "latest-tag=$LATEST_TAG" >> $GITHUB_OUTPUT

  build-debian:
    needs: check-upstream
    if: needs.check-upstream.outputs.should-build == 'true'
    runs-on: ubuntu-latest
    container: debian:bookworm
    
    steps:
      - name: Install git and basic tools
        run: |
          apt-get update
          apt-get install -y git ca-certificates curl
          
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Sync with upstream
        run: |
          git config --global --add safe.directory /__w/$(echo ${{ github.repository }} | cut -d'/' -f2)/$(echo ${{ github.repository }} | cut -d'/' -f2)
          git remote add upstream https://github.com/prusa3d/PrusaSlicer.git
          git fetch upstream --tags
          
          # Check if tag exists
          if git tag -l | grep -q "^${{ needs.check-upstream.outputs.latest-tag }}$"; then
            echo "Tag exists, checking out..."
            git checkout ${{ needs.check-upstream.outputs.latest-tag }}
          else
            echo "Tag not found locally, trying to fetch..."
            git fetch upstream ${{ needs.check-upstream.outputs.latest-tag }}:${{ needs.check-upstream.outputs.latest-tag }}
            git checkout ${{ needs.check-upstream.outputs.latest-tag }}
          fi
          
      - name: Setup Debian dependencies
        timeout-minutes: 20
        run: |
          echo "=== Starting dependency installation ==="
          echo "Available disk space:"
          df -h
          echo "Available memory:"
          cat /proc/meminfo | head -3
          echo "=== Installing packages ==="
          export DEBIAN_FRONTEND=noninteractive
          set -x  # Enable verbose output
          apt-get update
          echo "=== Update completed, installing packages ==="
          apt-get install -y --no-install-recommends \
            build-essential cmake \
            libboost-dev libboost-regex-dev libboost-filesystem-dev \
            libboost-thread-dev libboost-log-dev libboost-locale-dev \
            libboost-iostreams-dev libeigen3-dev libnlopt-cxx-dev \
            libudev-dev libopenvdb-dev libcereal-dev \
            libtbb-dev \
            libgl1-mesa-dev libglu1-mesa-dev libcurl4-openssl-dev \
            libwxgtk3.2-dev libgtk-3-dev pkg-config gettext \
            extra-cmake-modules libnss3-dev
          echo "=== Dependency installation completed ==="
            
      - name: Build PrusaSlicer
        timeout-minutes: 60
        run: |
          mkdir build
          cd build
          echo "=== Starting CMake configuration ==="
          # Try to find TBB headers location
          find /usr -name "tbb_stddef.h" 2>/dev/null || echo "TBB headers not found in standard location"
          ls -la /usr/include/tbb* 2>/dev/null || echo "No tbb directories in /usr/include"
          
          # Configure with fallback options
          cmake .. \
            -DCMAKE_BUILD_TYPE=Release \
            -DSLIC3R_STATIC=ON \
            -DTBB_ROOT=/usr \
            -DTBB_INCLUDE_DIR=/usr/include \
            || cmake .. -DCMAKE_BUILD_TYPE=Release -DSLIC3R_STATIC=ON -DSLIC3R_BUILD_SANDBOXES=OFF
          
          echo "=== Starting build ==="
          make -j$(nproc)
          
      - name: Find and prepare binary
        run: |
          find build -name "prusa-slicer" -type f -executable
          mkdir -p dist
          find build -name "prusa-slicer" -type f -executable -exec cp {} dist/ \;
          ls -la dist/
          
      - name: Test binary
        run: |
          cd dist
          ./prusa-slicer --help || echo "Binary test completed"
          
      - name: Upload Debian Build
        uses: actions/upload-artifact@v4
        with:
          name: PrusaSlicer-Debian-${{ needs.check-upstream.outputs.latest-tag }}
          path: dist/prusa-slicer
          retention-days: 90
          
      - name: Create Debian package info
        run: |
          echo "PrusaSlicer ${{ needs.check-upstream.outputs.latest-tag }}" > dist/VERSION
          echo "Built on Debian Bookworm" >> dist/VERSION
          echo "Build date: $(date)" >> dist/VERSION
          
      - name: Upload version info
        uses: actions/upload-artifact@v4
        with:
          name: PrusaSlicer-Debian-Info-${{ needs.check-upstream.outputs.latest-tag }}
          path: dist/VERSION
          retention-days: 90

  tag-local:
    needs: [check-upstream, build-debian]
    if: needs.check-upstream.outputs.has-new-release == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Tag and push
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag ${{ needs.check-upstream.outputs.latest-tag }}
          git push origin ${{ needs.check-upstream.outputs.latest-tag }}
